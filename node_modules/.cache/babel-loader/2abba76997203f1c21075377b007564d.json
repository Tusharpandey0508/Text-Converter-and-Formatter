{"ast":null,"code":"var _jsxFileName = \"/Users/Tushar/Desktop/React/text-convertor/src/components/Textform.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Textform(props) {\n  _s();\n\n  const handleOnChange = event => {\n    setText(event.target.value);\n  };\n\n  const upperCase = () => {\n    let newText = text.toUpperCase();\n    setText(newText);\n    props.showAlert(\"Converted To Upper Case\", \"success\");\n  };\n\n  const lowerCase = () => {\n    let newText = text.toLowerCase();\n    setText(newText);\n    props.showAlert(\"Converted To Upper Case\", \"success\");\n  };\n\n  const reset = () => {\n    let newText = \" \";\n    setText(newText);\n    props.showAlert(\"Text has Reseted\", \"success\");\n  };\n\n  const copy = () => {\n    let newText = document.getElementById(\"mybox\");\n    newText.select();\n    navigator.clipboard.writeText(newText.value);\n    setText(newText.value);\n    props.showAlert(\"Copied To Clipboard\", \"success\");\n  };\n\n  const removeSpace = () => {\n    let newText = text.split(/[ ]+/);\n    setText(newText.join(\" \"));\n    props.showAlert(\"Extra Space Has Removed\", \"success\");\n  };\n\n  const [text, setText] = useState(\"\");\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"containers\",\n      style: {\n        color: props.mode === 'light' ? 'black' : 'whitesmoke'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: props.heading\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-3\",\n        children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n          className: \"form-control\",\n          value: text,\n          id: \"mybox\",\n          onChange: handleOnChange,\n          style: {\n            backgroundColor: props.mode === 'light' ? 'whitesmoke' : ' #212529',\n            color: props.mode === 'light' ? 'black' : \"white\"\n          },\n          rows: \"10\",\n          placeholder: \"Enter the Text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 14\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-success\",\n        onClick: reset,\n        children: \"Reset Text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-danger mx-3\",\n        onClick: upperCase,\n        children: \"Convert to Upper Case\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-warning\",\n        onClick: lowerCase,\n        children: \"Convert to Lower Case\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-secondary mx-3\",\n        onClick: copy,\n        children: \"Copy Text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-info mx-2 my-1\",\n        onClick: removeSpace,\n        children: \"Remove Extra Space\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container my-4\",\n      style: {\n        color: props.mode === 'light' ? 'black' : 'whitesmoke'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Your Text Summary\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: [text.split().length, \" \", /*#__PURE__*/_jsxDEV(\"i\", {\n            children: \"words\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 38\n          }, this), \", \", text.length, \" \", /*#__PURE__*/_jsxDEV(\"i\", {\n            children: \" character\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 66\n          }, this), \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 8\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 93\n        }, this), /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: [0.008 * text.split(\" \").filter(elements => {\n            return elements.length !== 0;\n          }).length, \" \", /*#__PURE__*/_jsxDEV(\"i\", {\n            children: \"Minutes to read\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 101\n          }, this), \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Textform, \"/31x6IKLd9hKJNRoFN2Lb7ghI70=\");\n\n_c = Textform;\n\nvar _c;\n\n$RefreshReg$(_c, \"Textform\");","map":{"version":3,"sources":["/Users/Tushar/Desktop/React/text-convertor/src/components/Textform.js"],"names":["React","useState","Textform","props","handleOnChange","event","setText","target","value","upperCase","newText","text","toUpperCase","showAlert","lowerCase","toLowerCase","reset","copy","document","getElementById","select","navigator","clipboard","writeText","removeSpace","split","join","color","mode","heading","backgroundColor","length","filter","elements"],"mappings":"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","sourcesContent":["\r\nimport React, { useState } from 'react'\r\n\r\n\r\n\r\nexport default function Textform(props) {\r\n   const handleOnChange=(event)=>{\r\n    setText(event.target.value);\r\n}\r\n\r\n  const upperCase=()=>{\r\n      let newText = text.toUpperCase();\r\n      setText(newText);\r\n      props.showAlert(\"Converted To Upper Case\",\"success\")\r\n  }\r\n  const lowerCase=()=>{\r\n    let newText = text.toLowerCase();\r\n    setText(newText);\r\n    props.showAlert(\"Converted To Upper Case\",\"success\")\r\n}\r\nconst reset=()=>{\r\n    let newText = \" \";\r\n    setText(newText);\r\n    props.showAlert(\"Text has Reseted\",\"success\")\r\n}\r\nconst copy=()=>{\r\n    let newText= document.getElementById(\"mybox\");    newText.select();\r\n    navigator.clipboard.writeText(newText.value);\r\n    setText(newText.value);\r\n    props.showAlert(\"Copied To Clipboard\",\"success\");\r\n}\r\nconst removeSpace=()=>{\r\n    let newText = text.split(/[ ]+/ )\r\n    setText(newText.join(\" \"));\r\n    props.showAlert(\"Extra Space Has Removed\",\"success\");\r\n}\r\n\r\nconst[text,setText]=useState(\"\");\r\n\r\n  return (\r\n      <>\r\n    <div className='containers' style={{color:props.mode==='light'?'black':'whitesmoke'}}>\r\n            <h2>{props.heading}</h2>\r\n            <div className=\"mb-3\">\r\n\r\n               \r\n             <textarea  className=\"form-control\" value={text} id=\"mybox\" onChange={handleOnChange} style={{backgroundColor:props.mode==='light'?'whitesmoke':' #212529',color:props.mode==='light'?'black':\"white\"}} rows=\"10\" placeholder='Enter the Text'></textarea>\r\n            </div>\r\n            <button className='btn btn-success' onClick={reset}>Reset Text</button>\r\n            <button className='btn btn-danger mx-3' onClick={upperCase}>Convert to Upper Case</button>\r\n           \r\n            <button className='btn btn-warning' onClick={lowerCase}>Convert to Lower Case</button>\r\n            <button className='btn btn-secondary mx-3' onClick={copy}>Copy Text</button>\r\n            <button className=\"btn btn-info mx-2 my-1\" onClick={removeSpace}>Remove Extra Space</button>\r\n            \r\n\r\n    </div> \r\n    <div className='container my-4' style={{color:props.mode==='light'?'black':'whitesmoke'}}>\r\n        <h2>Your Text Summary</h2>\r\n    <p><strong>{text.split().length} <i>words</i>, {text.length} <i> character</i> </strong><br />\r\n            <strong>{0.008*text.split(\" \").filter((elements)=>{return elements.length!==0}).length} <i>Minutes to read</i> </strong></p>\r\n    </div>\r\n    </>\r\n\r\n  )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}